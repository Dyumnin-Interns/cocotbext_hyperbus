{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cocotb extension for HyperBus","text":""},{"location":"#installation","title":"Installation","text":"<p>Installation from pip (release version, stable):</p> <pre><code>pip install cocotbext-hyperbus\n</code></pre> <p>Installation for active development:</p> <pre><code>git clone https://github.com/meeeeet/cocotbext_hyperbus\npip install -e cocotbext_hyperbus\n</code></pre>"},{"location":"#documentation-and-usage-examples","title":"Documentation and usage examples","text":"<p>See the <code>tests</code> directory for complete testbenches using these modules.</p>"},{"location":"#configuration","title":"Configuration","text":"<ol> <li> <p>Alter the following parameter in the Infineon HyperRAM RTL code to avoid the cocotb having to wait a long time and the simulation crashing.</p> <pre><code>// tdevice values: values for internal delays\n// power-on reset\nspecparam tdevice_VCS    = 150;\n// Deep Power Down to Idle wake up time\nspecparam tdevice_DPD    = 150;\n// Exit Event from Deep Power Down\nspecparam tdevice_DPDCSL = 20;\n// Warm HW reset\nspecparam tdevice_RPH    = 40;\n// Refresh time\nspecparam tdevice_REF100 = 40;\n// Page Open Time\nspecparam tdevice_PO100 = 40;\n</code></pre> </li> <li> <p>Make a wrapper module for better experience and make sure to use signal names in lowercase in wrapper module as shown in <code>test/wrapper_ram.v</code>.</p> </li> </ol>"},{"location":"#hyperbus","title":"HyperBus","text":"<p>The <code>HyperBusController</code> class can be used to drive and receive data from HyperRAM.</p> <p>To use these modules, import the one you need and connect it to the DUT:</p> <pre><code>from cocotbext_hyperbus import HyperBusController\n@cocotb.test()\nasync def sample_test(dut):\n    hbc=HyperBusController(dut)\n</code></pre>"},{"location":"#methods","title":"Methods","text":"<ul> <li><code>Reset(dut)</code>: Reset the dut</li> <li><code>WriteReg(addr,data)</code>: Write data into register at addr</li> <li><code>ReadReg(addr)</code>: Read from register at addr</li> <li><code>generate_random_data(len)</code>: Generate random 32-bit data of len length</li> <li><code>WriteMem(addr,data)</code>: Write data into memory at addr</li> <li><code>ReadMem(addr,len)</code>: Read len 32-bit data from memory starting from addr</li> </ul>"},{"location":"ai/","title":"Plan | project:cocotbext_hyperbus","text":"<ul> <li> Public release v0.2.0<ul> <li> Freeze the API</li> <li> Cleanup CI</li> <li> Cleanup documentation</li> <li> Make an explainer video.</li> </ul> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#025-2025-07-07","title":"[0.2.5] - 2025-07-07","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>v0.2.5 Added Init File</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>v0.2.5 Write interface to accept bytes.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>v0.2.5 Duplicate Github actions</li> </ul>"},{"location":"changelog/#024-2025-06-30","title":"[0.2.4] - 2025-06-30","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>v0.2.4 Added init.py file.</li> </ul>"},{"location":"changelog/#023-2025-06-30","title":"[0.2.3] - 2025-06-30","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>v0.2.3 Datafield changed to bytes from int</li> <li>v0.2.3 pdm compatible flow</li> <li>v0.2.3 pytest based test folder</li> <li>v0.2.3 dynamic versioning</li> </ul>"},{"location":"changelog/#017-2024-10-27","title":"[0.1.7] - 2024-10-27","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>v0.1.7 Support for Hierarchial RAL</li> </ul>"},{"location":"changelog/#016-2024-10-23","title":"[0.1.6] - 2024-10-23","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>v0.1.6 Cleaned up documentation.</li> </ul>"},{"location":"changelog/#015-2024-10-23","title":"[0.1.5] - 2024-10-23","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>v0.1.5 Added callback and testcases folder.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>v0.1.5 Refactored code to make contributing easy.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>v0.1.5 Replaced pkg_resources with imlib</li> </ul>"},{"location":"changelog/#014-2024-10-23","title":"[0.1.4] - 2024-10-23","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>v0.1.4 Added support for background reads and writes</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>v0.1.4 Fixes issus with CI relases</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>v0.1.4 Disabled safety and griffe duties</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at jahagirdar.vs@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#areas-for-contribution","title":"Areas for contribution","text":"<p>The project follows a modular approach to make it easier to support new RTL Generators and Testcases.</p>"},{"location":"contributing/#adding-support-for-a-new-rtl-coding-style","title":"Adding support for a new RTL Coding style.","text":"<p>There are dozens of proprietary and opensource tools for generating RTL code from IP-XACT, SystemRDL, CSV or other inhouse formats. These tools will define their fields in a fixed pattern, e.g. <code>&lt;prefix&gt;_&lt;RegisterName&gt;_&lt;signalName&gt;</code> or <code>&lt;signalName&gt;</code> or ...</p> <p>To add support to a particular style of signal naming,</p> <ol> <li>create a new file under <code>src/cocotbext/hyperbus/callbacks/bsv.py</code><ol> <li>Preferably name the file as .py <li>define your class and define the read and write functions in it.</li> <li>submit a PR.</li>"},{"location":"contributing/#adding-support-for-a-new-testcases","title":"Adding support for a new TestCases.","text":"<p>The current version of hyperbus supports reset check and simple rw_test with foreground and background read/write combinations. There are a bunch of additional tests that are normally written for checking registers. To contribute a new test: 1. Add your test to <code>src/cocotbext/hyperbus/testcases</code> folder 2. Submit a PR.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd cocotbext/hyperbus\npdm install\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>pdm run duty format</code> to auto-format the code</li> <li>run <code>pdm run duty check</code> to check everything (fix any warning)</li> <li>run <code>make C tests</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>pdm run duty docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build cocotbext-hyperbus. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>cocotb</code> cocotb is a coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python. <code>1.9.2</code> BSD <code>find-libpython</code> Finds the libpython associated with your environment, wherever it may be hiding <code>0.4.1</code> MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>annotated-types</code> Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>anyio</code> High level compatibility layer for multiple asynchronous event loop implementations <code>4.9.0</code> MIT <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT <code>authlib</code> The ultimate Python library in building OAuth and OpenID Connect servers and clients. <code>&gt;=1.2.0</code> <code>1.6.0</code> BSD-3-Clause <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause <code>backports-datetime-fromisoformat</code> Backport of Python 3.11's datetime.fromisoformat <code>; python_version &lt; \"3.11\"</code> <code>2.0.3</code> ? <code>backrefs</code> A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>25.1.0</code> MIT License <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.19.1</code> MIT License <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.6.15</code> MPL-2.0 <code>cffi</code> Foreign Function Interface for Python calling C code. <code>&gt;=1.12; platform_python_implementation != \"PyPy\"</code> <code>1.17.1</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.4.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.8</code> BSD License <code>cocotb</code> cocotb is a coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python. <code>&gt;=1.5</code> <code>1.9.2</code> BSD <code>cocotb-test</code> <code>0.2.6</code> BSD <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=7.5</code> <code>7.9.2</code> Apache-2.0 <code>cryptography</code> cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>43.0.3</code> Apache-2.0 OR BSD-3-Clause <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.4</code> <code>0.6.4</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.6.0</code> ISC <code>eval-type-backport</code> Like <code>typing._eval_type</code>, but lets older Python versions use newer typing features. <code>; python_version &lt; \"3.10\"</code> <code>0.2.2</code> ? <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1; python_version &lt; \"3.11\"</code> <code>1.3.0</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>!=1.0.0,&gt;=0.11</code> <code>1.0.3</code> ISC <code>filelock</code> A platform independent file lock. <code>~=3.16.1</code> <code>3.16.1</code> The Unlicense (Unlicense) <code>find-libpython</code> Finds the libpython associated with your environment, wherever it may be hiding <code>0.4.1</code> MIT <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.5.3</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.12</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.44</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.5.1</code> <code>1.7.3</code> ? <code>h11</code> A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 <code>&gt;=0.16</code> <code>0.16.0</code> MIT <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>httpcore</code> A minimal low-level HTTP client. <code>==1.*</code> <code>1.0.9</code> BSD License <code>httpx</code> The next generation HTTP client. <code>0.28.1</code> BSD-3-Clause <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.10</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>; python_version &lt; \"3.8\"</code> <code>8.7.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.6</code> BSD License <code>joblib</code> Lightweight pipelining with Python functions <code>1.5.1</code> BSD 3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.8.2</code> ? <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.11.0</code> ? <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License <code>marshmallow</code> A lightweight library for converting complex datatypes to and from native Python datatypes. <code>&gt;=3.15.0</code> <code>4.0.0</code> MIT License <code>mdurl</code> Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.6.1</code> BSD License <code>mkdocs-autorefs</code> Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ? <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.5.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.2</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.6.15</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.29.1</code> ? <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12</code> ? <code>mypy</code> Optional static typing for Python <code>&gt;=1.5</code> <code>1.16.1</code> MIT <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.1.0</code> ? <code>nltk</code> Natural Language Toolkit <code>&gt;=3.9</code> <code>3.9.1</code> Apache License, Version 2.0 <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>25.0</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2</code> <code>4.3.8</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2,&gt;=1.5</code> <code>1.6.0</code> MIT <code>psutil</code> Cross-platform lib for process and system monitoring in Python. <code>~=6.1.0</code> <code>6.1.1</code> BSD-3-Clause <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pycparser</code> C parser in Python <code>2.22</code> BSD-3-Clause <code>pydantic</code> Data validation using Python type hints <code>&lt;2.10.0,&gt;=2.6.0</code> <code>2.9.2</code> MIT License <code>pydantic-core</code> Core functionality for Pydantic validation and serialization <code>==2.23.4</code> <code>2.23.4</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.2</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.16</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>8.4.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>6.2.1</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.8.0</code> ? <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> ? <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2021.8.3</code> <code>2024.11.6</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.32.4</code> Apache-2.0 <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=10.11.0</code> <code>14.0.0</code> MIT <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.14</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.14\"</code> <code>0.2.12</code> MIT <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.0</code> <code>0.12.2</code> MIT <code>safety</code> Scan dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>3.5.2</code> MIT License <code>safety-schemas</code> Schemas for Safety tools <code>==0.0.14</code> <code>0.0.14</code> MIT <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=65.5.1</code> <code>80.9.0</code> ? <code>shellingham</code> Tool to Detect Surrounding Shell <code>&gt;=1.3.0</code> <code>1.5.4</code> ISC License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.2</code> BSD-3-Clause <code>sniffio</code> Sniff out which async library your code is running under <code>&gt;=1.1</code> <code>1.3.1</code> MIT OR Apache-2.0 <code>tenacity</code> Retry code until it succeeds <code>9.1.2</code> Apache 2.0 <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; \"3.11\"</code> <code>2.2.1</code> ? <code>tomlkit</code> Style preserving TOML library <code>0.13.3</code> MIT <code>tqdm</code> Fast, Extensible Progress Meter <code>4.67.1</code> MPL-2.0 AND MIT <code>typer</code> Typer, build great CLIs. Easy to code. Based on Python type hints. <code>&gt;=0.12.1</code> <code>0.16.0</code> MIT License <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.8.0.20250415</code> ? <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250516</code> ? <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.14.1</code> ? <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.5.0</code> ? <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.20</code> <code>3.23.0</code> ?"},{"location":"license/","title":"License","text":"<pre><code>Copyright (c) 2024 Meet Sangani\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> cocotbext<ul> <li> hyperbus<ul> <li> hbc_fsm</li> <li> hyperbus_controller</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cocotbext/","title":"Index","text":""},{"location":"reference/cocotbext/#cocotbext","title":"cocotbext","text":"<p>Stub.</p> <p>Modules:</p> <ul> <li> <code>hyperbus</code>           \u2013            <p>Initializie Hyperbus library.</p> </li> </ul>"},{"location":"reference/cocotbext/hyperbus/","title":"Index","text":""},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus","title":"hyperbus","text":"<p>Initializie Hyperbus library.</p> <p>Modules:</p> <ul> <li> <code>hbc_fsm</code>           \u2013            <p>Contains HyperBus_FSM class for the State Machine in hyperbus protocol.</p> </li> <li> <code>hyperbus_controller</code>           \u2013            <p>HyperBusController class.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>HyperBusController</code>           \u2013            <p>HyperBus Controller class with methods.</p> </li> <li> <code>HyperBus_FSM</code>           \u2013            <p>State machine class for hyperbus.</p> </li> </ul>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController","title":"HyperBusController","text":"<pre><code>HyperBusController(dut: SimHandleBase)\n</code></pre> <p>               Bases: <code>HyperBus_FSM</code></p> <p>HyperBus Controller class with methods.</p> <p>Reset, ReadReg, WriteReg, ReadMem, WriteMem, clk_cycle, ck_cycle, int_to_8bit_array, arr_io_dq, Assign, wait_100ns, drive_dq, monitor_dq, wait_until_mem_ready.</p> <p>Methods:</p> <ul> <li> <code>Assign</code>             \u2013              <p>Drives and Monitors signals between controllor and dut.</p> </li> <li> <code>Init</code>             \u2013              <p>Initialize clock, Controller FSM and connects dut with controllor.</p> </li> <li> <code>ReadMem</code>             \u2013              <p>Reads the memory content form the starting address for a specified number of bytes.</p> </li> <li> <code>ReadReg</code>             \u2013              <p>Reads from a register based on the address, returns 2 bytes.</p> </li> <li> <code>Reset</code>             \u2013              <p>Reset based on timing requirement of the rtl model.</p> </li> <li> <code>WriteMem</code>             \u2013              <p>Writes the memory content form the starting address for specified bytes of data.</p> </li> <li> <code>WriteReg</code>             \u2013              <p>Writes 2 bytes to a register based on the address.</p> </li> <li> <code>arr_io_dq</code>             \u2013              <p>Returns the bit at an index for the 8 bit array.</p> </li> <li> <code>ca_words</code>             \u2013              <p>Splits the 48bit CA into 6 bytes for transmission.</p> </li> <li> <code>ck_cycle</code>             \u2013              <p>Updates the derived clock based on reset and chip select lines.</p> </li> <li> <code>clk_cycle</code>             \u2013              <p>Generate the clock for the test.</p> </li> <li> <code>drive_dq</code>             \u2013              <p>Drives the data bus.</p> </li> <li> <code>fsm</code>             \u2013              <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> </li> <li> <code>fsm_reset</code>             \u2013              <p>Resets the fsm to IDLE state.</p> </li> <li> <code>generate_random_data</code>             \u2013              <p>Generate random num number of byte.</p> </li> <li> <code>get_time</code>             \u2013              <p>Get simulation time.</p> </li> <li> <code>int_to_8bit_array</code>             \u2013              <p>Converts Integer into a 8 bit binary string array.</p> </li> <li> <code>is_rwdsvalid</code>             \u2013              <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> </li> <li> <code>log</code>             \u2013              <p>Logs a message value with prefixed simulation time.</p> </li> <li> <code>monitor_dq</code>             \u2013              <p>Moniters the data bus.</p> </li> <li> <code>rwds_valid</code>             \u2013              <p>Returns True if RWDS is valid.</p> </li> <li> <code>rx_data</code>             \u2013              <p>Returns hex string of a 32 bit number.</p> </li> <li> <code>swap_halves</code>             \u2013              <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> </li> <li> <code>update_ca</code>             \u2013              <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> </li> <li> <code>wait_100ns</code>             \u2013              <p>Waits for 100ns.</p> </li> <li> <code>wait_until_mem_ready</code>             \u2013              <p>Continously polls for every half clock cycle to check if the memory is ready.</p> </li> <li> <code>wdata_words</code>             \u2013              <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> </li> <li> <code>wstrb_words</code>             \u2013              <p>Splits Write strobe into bits for each byte lane.</p> </li> </ul> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def __init__(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Initialization.\"\"\"\n    super().__init__()\n    self.Init(dut)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.Assign","title":"Assign  <code>async</code>","text":"<pre><code>Assign(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Drives and Monitors signals between controllor and dut.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def Assign(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Drives and Monitors signals between controllor and dut.\"\"\"\n    # dut.rwds.value=BinaryValue(self.highimp_1)\n    self.drive_dq(dut, self.highimp_8)\n    while True:\n        if self.o_dq_de:\n            self.drive_dq(dut, self.io_dq)\n\n        if self.o_rwds_de:\n            dut.rwds.value = Force(self.o_rwds)\n        else:\n            dut.rwds.value = Release()\n\n        dut.csneg.value = self.o_csn0\n        dut.ck.value = self.o_clk\n        dut.resetneg.value = self.o_resetn\n        self.monitor_dq(dut)\n        self.i_rwds = dut.rwds.value\n        await Timer(1, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.Init","title":"Init","text":"<pre><code>Init(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Initialize clock, Controller FSM and connects dut with controllor.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def Init(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Initialize clock, Controller FSM and connects dut with controllor.\"\"\"\n    self.log(\"Init...\")\n    cocotb.start_soon(self.clk_cycle(dut))\n    cocotb.start_soon(self.Assign(dut))\n    cocotb.start_soon(self.fsm(dut))\n    cocotb.start_soon(self.is_rwdsvalid())\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.ReadMem","title":"ReadMem  <code>async</code>","text":"<pre><code>ReadMem(addr: int, count: int) -&gt; bytes\n</code></pre> <p>Reads the memory content form the starting address for a specified number of bytes.</p> <p>Each transaction is 4 bytes.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def ReadMem(self, addr: int, count: int) -&gt; bytes:\n    \"\"\"Reads the memory content form the starting address for a specified number of bytes.\n\n    Each transaction is 4 bytes.\n    \"\"\"\n    r_addr = addr\n    r_data = []\n\n    count_32b = count // 4\n    count_rem = count % 4\n    if count_rem &gt; 0:\n        count_32b += 1\n\n    for _i in range(count_32b):\n        self.log(\"--------------------------------------------------\")\n        self.log(\"Reading from memory...\")\n        self.i_cfg_access = 0\n        self.i_mem_wstrb = 0\n        self.i_mem_addr = r_addr\n        self.i_mem_valid = 1\n        await Timer(10, \"ns\")\n        self.i_mem_valid = 0\n        await self.wait_until_mem_ready()\n        r_data.append(self.o_mem_rdata)\n        self.log(\"Read operation complete.\")\n        self.log(f\"Address: {hex(r_addr)}   Data: {hex(self.o_mem_rdata)}\")\n        self.log(\"--------------------------------------------------\")\n        # self.log(f\"$$$$$$$$ o_mem_rdata {self.rx_data(self.o_mem_rdata,32)}\")\n        await Timer(20, \"ns\")\n        r_addr += 2\n\n    # Convert list of 32-bit packets back into bytes (little-endian)\n    byte_data = []\n    for val in r_data:\n        byte_data.append((val &gt;&gt; 0) &amp; 0xFF)\n        byte_data.append((val &gt;&gt; 8) &amp; 0xFF)\n        byte_data.append((val &gt;&gt; 16) &amp; 0xFF)\n        byte_data.append((val &gt;&gt; 24) &amp; 0xFF)\n\n    return bytes(byte_data[:count])\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.ReadReg","title":"ReadReg  <code>async</code>","text":"<pre><code>ReadReg(addr: int) -&gt; bytes\n</code></pre> <p>Reads from a register based on the address, returns 2 bytes.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def ReadReg(self, addr: int) -&gt; bytes:\n        \"\"\"Reads from a register based on the address, returns 2 bytes.\"\"\"\n        self.i_cfg_access = 1\n        self.i_mem_valid = 1\n        self.i_mem_wstrb = 0\n        self.i_mem_addr = addr\n        await Timer(10, \"ns\")\n        self.i_mem_valid = 0\n        await self.wait_until_mem_ready()\n        await Timer(20, \"ns\")\n\n        reg_value = self.mem_rdata &amp; 0xFFFF  # Directly use as int\n        return reg_value.to_bytes(2, byteorder=\"big\")  # or 'little' if system is little-endian\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.Reset","title":"Reset  <code>async</code>","text":"<pre><code>Reset(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Reset based on timing requirement of the rtl model.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def Reset(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Reset based on timing requirement of the rtl model.\"\"\"\n    self.i_rstn = 0\n    await Timer(100, \"ns\")\n    self.i_rstn = 1\n    self.log(\"Waiting for device power-up...\")\n    # TODO: Change power-up time in rtl\n    await Timer(160, \"ns\")\n    self.log(\"RAM IS READY!!!!!!\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.WriteMem","title":"WriteMem  <code>async</code>","text":"<pre><code>WriteMem(addr: int, data: bytes) -&gt; None\n</code></pre> <p>Writes the memory content form the starting address for specified bytes of data.</p> <p>Each transaction is 4 bytes.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def WriteMem(self, addr: int, data: bytes) -&gt; None:\n    \"\"\"Writes the memory content form the starting address for specified bytes of data.\n\n    Each transaction is 4 bytes.\n    \"\"\"\n    w_addr = addr\n\n    # Convert byte stream into list of 32-bit packets (little-endian)\n    padded_data = data\n    if (len(data) % 4) != 0:\n        padding = 4 - (len(data) % 4)\n        padded_data = data + b\"\\x00\" * padding\n\n    b32_list = []\n    for i in range(0, len(padded_data), 4):\n        val = (\n            (padded_data[i + 0])\n            | (padded_data[i + 1] &lt;&lt; 8)\n            | (padded_data[i + 2] &lt;&lt; 16)\n            | (padded_data[i + 3] &lt;&lt; 24)\n        )\n        b32_list.append(val)\n\n    for w_data in b32_list:\n        self.log(\"--------------------------------------------------\")\n        self.log(\"Writing into memory...\")\n        self.i_cfg_access = 0\n        self.i_mem_wdata = self.swap_halves(w_data)\n        self.i_mem_addr = w_addr\n        self.i_mem_valid = 1\n        self.i_mem_wstrb = 15\n        await Timer(10, \"ns\")\n        self.i_mem_valid = 0\n\n        await self.wait_until_mem_ready()\n        self.log(\"Write operation complete.\")\n        self.log(f\"Address: {hex(w_addr)}   Data: {hex(w_data)}\")\n        self.log(\"--------------------------------------------------\")\n        await Timer(20, \"ns\")\n        w_addr += 2\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.WriteReg","title":"WriteReg  <code>async</code>","text":"<pre><code>WriteReg(addr: int, data: bytes) -&gt; None\n</code></pre> <p>Writes 2 bytes to a register based on the address.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def WriteReg(self, addr: int, data: bytes) -&gt; None:\n    \"\"\"Writes 2 bytes to a register based on the address.\"\"\"\n    expected_bytes = 2\n    if len(data) != expected_bytes:\n        raise ValueError(\"WriteReg expects exactly 2 bytes.\")\n\n    int_data = int.from_bytes(data, byteorder=\"big\")  # or 'little' if required\n    self.i_cfg_access = 1\n    self.i_mem_wdata = self.swap_halves(int_data)\n    self.i_mem_addr = addr\n    self.i_mem_valid = 1\n    self.i_mem_wstrb = 0xF\n    await Timer(10, \"ns\")\n    self.i_mem_valid = 0\n    await self.wait_until_mem_ready()\n    await Timer(20, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.arr_io_dq","title":"arr_io_dq","text":"<pre><code>arr_io_dq(index: int, value: Union[int, str]) -&gt; str\n</code></pre> <p>Returns the bit at an index for the 8 bit array.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def arr_io_dq(self, index: int, value: Union[int, str]) -&gt; str:\n    \"\"\"Returns the bit at an index for the 8 bit array.\"\"\"\n    _io_dq = self.int_to_8bit_array(value)\n    return _io_dq[index]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.ca_words","title":"ca_words","text":"<pre><code>ca_words() -&gt; List[int]\n</code></pre> <p>Splits the 48bit CA into 6 bytes for transmission.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def ca_words(self) -&gt; List[int]:\n    \"\"\"Splits the 48bit CA into 6 bytes for transmission.\"\"\"\n    return [(self.ca &gt;&gt; (8 * i)) &amp; 0xFF for i in range(6)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.ck_cycle","title":"ck_cycle","text":"<pre><code>ck_cycle(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Updates the derived clock based on reset and chip select lines.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def ck_cycle(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Updates the derived clock based on reset and chip select lines.\"\"\"\n    if not self.i_rstn:\n        self.bus_clk = 0\n    else:\n        self.bus_clk = not self.bus_clk if not self.o_csn0 else 0\n    self.o_clk = self.bus_clk\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.clk_cycle","title":"clk_cycle  <code>async</code>","text":"<pre><code>clk_cycle(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Generate the clock for the test.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def clk_cycle(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Generate the clock for the test.\"\"\"\n    while True:\n        self.i_clk = 0\n        await Timer(5, \"ns\")\n        self.i_clk = 1\n        await Timer(5, \"ns\")\n        self.ck_cycle(dut)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.drive_dq","title":"drive_dq","text":"<pre><code>drive_dq(\n    dut: SimHandleBase, value: Union[int, str]\n) -&gt; None\n</code></pre> <p>Drives the data bus.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def drive_dq(self, dut: SimHandleBase, value: Union[int, str]) -&gt; None:\n    \"\"\"Drives the data bus.\"\"\"\n    dut.dq7.value = BinaryValue(self.arr_io_dq(0, value))\n    dut.dq6.value = BinaryValue(self.arr_io_dq(1, value))\n    dut.dq5.value = BinaryValue(self.arr_io_dq(2, value))\n    dut.dq4.value = BinaryValue(self.arr_io_dq(3, value))\n    dut.dq3.value = BinaryValue(self.arr_io_dq(4, value))\n    dut.dq2.value = BinaryValue(self.arr_io_dq(5, value))\n    dut.dq1.value = BinaryValue(self.arr_io_dq(6, value))\n    dut.dq0.value = BinaryValue(self.arr_io_dq(7, value))\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.fsm","title":"fsm  <code>async</code>","text":"<pre><code>fsm(dut: SimHandleBase) -&gt; None\n</code></pre> <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def fsm(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.\"\"\"\n    await Timer(5, \"ns\")\n    while True:\n        if not self.i_rstn:\n            self.fsm_reset()\n\n        elif self.state == self.IDLE:\n            self.mem_ready = 0\n            if self.i_mem_valid and not self.mem_ready:\n                self.ca = self.update_ca(self.i_mem_wstrb, self.i_cfg_access, self.i_mem_addr)\n                self.wdata = self.i_mem_wdata\n                self.wstrb = self.i_mem_wstrb\n                self.counter = 5\n                self.state = self.CAs\n\n        elif self.state == self.CAs:\n            if self.counter:\n                self.counter -= 1\n            elif self.ca &gt;&gt; 47:\n                self.counter = 3\n                self.state = self.READ\n            elif self.ca &gt;&gt; 46 &amp; 1:\n                self.counter = 1\n                self.state = self.WRITE\n            else:\n                self.counter = self.WRITE_LATENCY\n                self.state = self.WR_LATENCY\n\n        elif self.state == self.WR_LATENCY:\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.counter = 3\n                self.state = self.WRITE\n\n        elif self.state == self.WRITE:\n\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.state = self.DONE\n\n        elif self.state == self.READ:\n\n            if self.rwds_valid():\n                if self.counter == self.RBYTE_3:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 8) | (\n                        self.mem_rdata &amp; 0xFFFF00FF\n                    )\n                elif self.counter == self.RBYTE_2:\n                    self.mem_rdata = (self.i_dq) | (self.mem_rdata &amp; 0xFFFFFF00)\n                elif self.counter == self.RBYTE_1:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 24) | (\n                        self.mem_rdata &amp; 0x00FFFFFF\n                    )\n                elif self.counter == self.RBYTE_0:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 16) | (\n                        self.mem_rdata &amp; 0xFF00FFFF\n                    )\n                if self.counter:\n                    self.counter -= 1\n                else:\n                    self.state = self.DONE\n\n        elif self.state == self.DONE:\n            self.mem_ready = 1\n            self.state = self.IDLE\n\n        self.o_csn0 = self.state in [self.IDLE, self.DONE]\n        self.o_resetn = self.i_rstn\n        self.o_dq = (\n            self.ca_words()[self.counter]\n            if self.state == self.CAs\n            else (\n                self.wdata_words()[self.counter] if self.state == self.WRITE else 0\n            )\n        )\n        self.o_rwds = (\n            not self.wstrb_words()[self.counter] if self.state == self.WRITE else 0\n        )\n        self.o_dq_de = self.state in [self.CAs, self.WRITE]\n        self.o_rwds_de = self.state == self.WRITE and not (self.ca &gt;&gt; 46 &amp; 1)\n        self.o_mem_ready = self.mem_ready\n        self.o_mem_rdata = self.mem_rdata\n        self.io_dq = self.o_dq if self.o_dq_de else self.highimp_8\n        self.io_rwds = (self.o_rwds if self.o_rwds_de else BinaryValue(self.highimp_1))\n        await Timer(10, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.fsm_reset","title":"fsm_reset","text":"<pre><code>fsm_reset() -&gt; None\n</code></pre> <p>Resets the fsm to IDLE state.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def fsm_reset(self) -&gt; None:\n    \"\"\"Resets the fsm to IDLE state.\"\"\"\n    self.ca = 0\n    self.state = self.IDLE\n    self.mem_ready = 0\n    self.mem_rdata = 0\n    self.counter = 0\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.generate_random_data","title":"generate_random_data","text":"<pre><code>generate_random_data(num: int) -&gt; bytes\n</code></pre> <p>Generate random num number of byte.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def generate_random_data(self, num: int) -&gt; bytes:\n    \"\"\"Generate random num number of byte.\"\"\"\n    int_list = []\n    for _ in range(num):\n        # Generate a random integer within the specified range\n        random_int = random.randint(0, 2**8 - 1)\n        int_list.append(random_int)\n    return bytes(int_list)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.get_time","title":"get_time","text":"<pre><code>get_time() -&gt; int\n</code></pre> <p>Get simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def get_time(self) -&gt; int:\n    \"\"\"Get simulation time.\"\"\"\n    return get_sim_time(\"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.int_to_8bit_array","title":"int_to_8bit_array","text":"<pre><code>int_to_8bit_array(\n    num: Union[int, str],\n) -&gt; Union[str, List[str]]\n</code></pre> <p>Converts Integer into a 8 bit binary string array.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def int_to_8bit_array(self, num: Union[int, str]) -&gt; Union[str, List[str]]:\n    \"\"\"Converts Integer into a 8 bit binary string array.\"\"\"\n    if num in (self.highimp_1, self.highimp_8):\n        return str(num)\n    binary_str = bin(int(num))[2:]\n    padded_binary_str = binary_str.zfill(8)\n    return [str(bit) for bit in padded_binary_str]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.is_rwdsvalid","title":"is_rwdsvalid  <code>async</code>","text":"<pre><code>is_rwdsvalid() -&gt; None\n</code></pre> <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def is_rwdsvalid(self) -&gt; None:\n    \"\"\"Samples the RWDS input signal every 5ns and stores it in rwds_d.\"\"\"\n    while True:\n        await Timer(5, \"ns\")\n        self.rwds_d = self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.log","title":"log","text":"<pre><code>log(msg: str) -&gt; None\n</code></pre> <p>Logs a message value with prefixed simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def log(self, msg: str) -&gt; None:\n    \"\"\"Logs a message value with prefixed simulation time.\"\"\"\n    cocotb.log.info(f\"[{self.get_time()}]  {msg}\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.monitor_dq","title":"monitor_dq","text":"<pre><code>monitor_dq(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Moniters the data bus.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def monitor_dq(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Moniters the data bus.\"\"\"\n    arr = [\n        dut.dq7.value,\n        dut.dq6.value,\n        dut.dq5.value,\n        dut.dq4.value,\n        dut.dq3.value,\n        dut.dq2.value,\n        dut.dq1.value,\n        dut.dq0.value,\n    ]\n    binary_str = \"\".join(map(str, arr))\n\n    if any(char == \"z\" for char in binary_str):\n        self.i_dq = 0\n    else:\n        self.i_dq = int(binary_str, 2)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.rwds_valid","title":"rwds_valid","text":"<pre><code>rwds_valid() -&gt; int\n</code></pre> <p>Returns True if RWDS is valid.</p> <p>Used for data sampling.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rwds_valid(self) -&gt; int:\n    \"\"\"Returns True if RWDS is valid.\n\n    Used for data sampling.\n    \"\"\"\n    return self.rwds_d or self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.rx_data","title":"rx_data","text":"<pre><code>rx_data(num: int, size: int)\n</code></pre> <p>Returns hex string of a 32 bit number.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rx_data(self, num: int, size: int):\n    \"\"\"Returns hex string of a 32 bit number.\"\"\"\n    binary_str = format(num, \"032b\")\n    shrinked_binary_str = binary_str[-size:]\n    shrinked_num = int(shrinked_binary_str, 2)\n    return hex(shrinked_num)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.swap_halves","title":"swap_halves","text":"<pre><code>swap_halves(hex_num: int) -&gt; int\n</code></pre> <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def swap_halves(self, hex_num: int) -&gt; int:\n    \"\"\"Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.\"\"\"\n    hex_str = f\"{hex_num:08x}\"\n    first_half = hex_str[:4]\n    second_half = hex_str[4:]\n    swapped_hex_str = second_half + first_half\n    return int(swapped_hex_str, 16)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.update_ca","title":"update_ca","text":"<pre><code>update_ca(\n    i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int\n) -&gt; int\n</code></pre> <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def update_ca(self, i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int) -&gt; int:\n    \"\"\"Builds the 48-bit command/address word using write strobe, config access, and memory address fields.\"\"\"\n    or_i_mem_wstrb = int(i_mem_wstrb != 0)\n    not_or_i_mem_wstrb = int(not or_i_mem_wstrb)\n    _ca = 0\n    _ca |= not_or_i_mem_wstrb &lt;&lt; 47\n    _ca |= int(i_cfg_access) &lt;&lt; 46\n    _ca |= (or_i_mem_wstrb &amp; int(i_cfg_access)) &lt;&lt; 45\n    _ca &amp;= ~((1 &lt;&lt; 45) - (1 &lt;&lt; 16))\n    _ca |= (i_mem_addr &amp; 0xFFFFFFF8) &lt;&lt; 13\n    _ca &amp;= ~0x7\n    _ca |= i_mem_addr &amp; 0x7\n    _ca &amp;= (1 &lt;&lt; 48) - 1\n    return _ca\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.wait_100ns","title":"wait_100ns  <code>async</code>","text":"<pre><code>wait_100ns(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Waits for 100ns.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def wait_100ns(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Waits for 100ns.\"\"\"\n    await Timer(100, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.wait_until_mem_ready","title":"wait_until_mem_ready  <code>async</code>","text":"<pre><code>wait_until_mem_ready() -&gt; None\n</code></pre> <p>Continously polls for every half clock cycle to check if the memory is ready.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def wait_until_mem_ready(self) -&gt; None:\n    \"\"\"Continously polls for every half clock cycle to check if the memory is ready.\"\"\"\n    while True:\n        await Timer(5, \"ns\")\n        if self.o_mem_ready:\n            break\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.wdata_words","title":"wdata_words","text":"<pre><code>wdata_words() -&gt; List[int]\n</code></pre> <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wdata_words(self) -&gt; List[int]:\n    \"\"\"Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.\"\"\"\n    if self.ca &gt;&gt; 46 &amp; 1:\n        return [(self.wdata &gt;&gt; 16) &amp; 0xFF, (self.wdata &gt;&gt; 24) &amp; 0xFF]\n\n    return [(self.wdata &gt;&gt; (8 * i)) &amp; 0xFF for i in range(4)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBusController.wstrb_words","title":"wstrb_words","text":"<pre><code>wstrb_words() -&gt; List[int]\n</code></pre> <p>Splits Write strobe into bits for each byte lane.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wstrb_words(self) -&gt; List[int]:\n    \"\"\"Splits Write strobe into bits for each byte lane.\"\"\"\n    return [(self.wstrb &gt;&gt; 1) &amp; 1, self.wstrb &amp; 1, (self.wstrb &gt;&gt; 3) &amp; 1, (self.wstrb &gt;&gt; 2) &amp; 1]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM","title":"HyperBus_FSM","text":"<pre><code>HyperBus_FSM()\n</code></pre> <p>State machine class for hyperbus.</p> <p>Methods:</p> <ul> <li> <code>ca_words</code>             \u2013              <p>Splits the 48bit CA into 6 bytes for transmission.</p> </li> <li> <code>fsm</code>             \u2013              <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> </li> <li> <code>fsm_reset</code>             \u2013              <p>Resets the fsm to IDLE state.</p> </li> <li> <code>generate_random_data</code>             \u2013              <p>Generate random num number of byte.</p> </li> <li> <code>get_time</code>             \u2013              <p>Get simulation time.</p> </li> <li> <code>is_rwdsvalid</code>             \u2013              <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> </li> <li> <code>log</code>             \u2013              <p>Logs a message value with prefixed simulation time.</p> </li> <li> <code>rwds_valid</code>             \u2013              <p>Returns True if RWDS is valid.</p> </li> <li> <code>rx_data</code>             \u2013              <p>Returns hex string of a 32 bit number.</p> </li> <li> <code>swap_halves</code>             \u2013              <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> </li> <li> <code>update_ca</code>             \u2013              <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> </li> <li> <code>wdata_words</code>             \u2013              <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> </li> <li> <code>wstrb_words</code>             \u2013              <p>Splits Write strobe into bits for each byte lane.</p> </li> </ul> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialization of signals in testbench and dut.\"\"\"\n    self.i_clk = 0\n    self.i_rstn = 1\n    self.i_cfg_access = 0\n    self.i_mem_valid = 0\n    self.o_mem_ready = 0\n    self.i_mem_wstrb = 0\n    self.i_mem_addr = 0\n    self.i_mem_wdata = 0\n    self.o_mem_rdata = 0\n    self.o_csn0 = 1\n    self.o_csn1 = 1\n    self.o_clk = 0\n    self.o_clkn = 1\n    self.o_dq = 0\n    self.i_dq = 0\n    self.o_dq_de = 0\n    self.o_rwds = 0\n    self.i_rwds = 0\n    self.o_rwds_de = 0\n    self.o_resetn = 1\n    self.io_dq: Union[int, str] = 0\n    self.io_rwds = 0\n    self.dq_z_en = 0\n    # Internal Variables\n    self.state = self.IDLE\n    self.ca = 0\n    self.wdata = 0\n    self.wstrb = 0\n    self.counter = 0\n    self.mem_ready = 0\n    self.mem_rdata = 0\n    self.rwds_d = 0\n    self.bus_clk = 0\n\n    # High-z values\n    self.highimp_8 = \"z\"\n    for _i in range(7):\n        self.highimp_8 += \"z\"\n    self.highimp_1 = \"z\"\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.ca_words","title":"ca_words","text":"<pre><code>ca_words() -&gt; List[int]\n</code></pre> <p>Splits the 48bit CA into 6 bytes for transmission.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def ca_words(self) -&gt; List[int]:\n    \"\"\"Splits the 48bit CA into 6 bytes for transmission.\"\"\"\n    return [(self.ca &gt;&gt; (8 * i)) &amp; 0xFF for i in range(6)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.fsm","title":"fsm  <code>async</code>","text":"<pre><code>fsm(dut: SimHandleBase) -&gt; None\n</code></pre> <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def fsm(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.\"\"\"\n    await Timer(5, \"ns\")\n    while True:\n        if not self.i_rstn:\n            self.fsm_reset()\n\n        elif self.state == self.IDLE:\n            self.mem_ready = 0\n            if self.i_mem_valid and not self.mem_ready:\n                self.ca = self.update_ca(self.i_mem_wstrb, self.i_cfg_access, self.i_mem_addr)\n                self.wdata = self.i_mem_wdata\n                self.wstrb = self.i_mem_wstrb\n                self.counter = 5\n                self.state = self.CAs\n\n        elif self.state == self.CAs:\n            if self.counter:\n                self.counter -= 1\n            elif self.ca &gt;&gt; 47:\n                self.counter = 3\n                self.state = self.READ\n            elif self.ca &gt;&gt; 46 &amp; 1:\n                self.counter = 1\n                self.state = self.WRITE\n            else:\n                self.counter = self.WRITE_LATENCY\n                self.state = self.WR_LATENCY\n\n        elif self.state == self.WR_LATENCY:\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.counter = 3\n                self.state = self.WRITE\n\n        elif self.state == self.WRITE:\n\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.state = self.DONE\n\n        elif self.state == self.READ:\n\n            if self.rwds_valid():\n                if self.counter == self.RBYTE_3:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 8) | (\n                        self.mem_rdata &amp; 0xFFFF00FF\n                    )\n                elif self.counter == self.RBYTE_2:\n                    self.mem_rdata = (self.i_dq) | (self.mem_rdata &amp; 0xFFFFFF00)\n                elif self.counter == self.RBYTE_1:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 24) | (\n                        self.mem_rdata &amp; 0x00FFFFFF\n                    )\n                elif self.counter == self.RBYTE_0:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 16) | (\n                        self.mem_rdata &amp; 0xFF00FFFF\n                    )\n                if self.counter:\n                    self.counter -= 1\n                else:\n                    self.state = self.DONE\n\n        elif self.state == self.DONE:\n            self.mem_ready = 1\n            self.state = self.IDLE\n\n        self.o_csn0 = self.state in [self.IDLE, self.DONE]\n        self.o_resetn = self.i_rstn\n        self.o_dq = (\n            self.ca_words()[self.counter]\n            if self.state == self.CAs\n            else (\n                self.wdata_words()[self.counter] if self.state == self.WRITE else 0\n            )\n        )\n        self.o_rwds = (\n            not self.wstrb_words()[self.counter] if self.state == self.WRITE else 0\n        )\n        self.o_dq_de = self.state in [self.CAs, self.WRITE]\n        self.o_rwds_de = self.state == self.WRITE and not (self.ca &gt;&gt; 46 &amp; 1)\n        self.o_mem_ready = self.mem_ready\n        self.o_mem_rdata = self.mem_rdata\n        self.io_dq = self.o_dq if self.o_dq_de else self.highimp_8\n        self.io_rwds = (self.o_rwds if self.o_rwds_de else BinaryValue(self.highimp_1))\n        await Timer(10, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.fsm_reset","title":"fsm_reset","text":"<pre><code>fsm_reset() -&gt; None\n</code></pre> <p>Resets the fsm to IDLE state.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def fsm_reset(self) -&gt; None:\n    \"\"\"Resets the fsm to IDLE state.\"\"\"\n    self.ca = 0\n    self.state = self.IDLE\n    self.mem_ready = 0\n    self.mem_rdata = 0\n    self.counter = 0\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.generate_random_data","title":"generate_random_data","text":"<pre><code>generate_random_data(num: int) -&gt; bytes\n</code></pre> <p>Generate random num number of byte.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def generate_random_data(self, num: int) -&gt; bytes:\n    \"\"\"Generate random num number of byte.\"\"\"\n    int_list = []\n    for _ in range(num):\n        # Generate a random integer within the specified range\n        random_int = random.randint(0, 2**8 - 1)\n        int_list.append(random_int)\n    return bytes(int_list)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.get_time","title":"get_time","text":"<pre><code>get_time() -&gt; int\n</code></pre> <p>Get simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def get_time(self) -&gt; int:\n    \"\"\"Get simulation time.\"\"\"\n    return get_sim_time(\"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.is_rwdsvalid","title":"is_rwdsvalid  <code>async</code>","text":"<pre><code>is_rwdsvalid() -&gt; None\n</code></pre> <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def is_rwdsvalid(self) -&gt; None:\n    \"\"\"Samples the RWDS input signal every 5ns and stores it in rwds_d.\"\"\"\n    while True:\n        await Timer(5, \"ns\")\n        self.rwds_d = self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.log","title":"log","text":"<pre><code>log(msg: str) -&gt; None\n</code></pre> <p>Logs a message value with prefixed simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def log(self, msg: str) -&gt; None:\n    \"\"\"Logs a message value with prefixed simulation time.\"\"\"\n    cocotb.log.info(f\"[{self.get_time()}]  {msg}\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.rwds_valid","title":"rwds_valid","text":"<pre><code>rwds_valid() -&gt; int\n</code></pre> <p>Returns True if RWDS is valid.</p> <p>Used for data sampling.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rwds_valid(self) -&gt; int:\n    \"\"\"Returns True if RWDS is valid.\n\n    Used for data sampling.\n    \"\"\"\n    return self.rwds_d or self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.rx_data","title":"rx_data","text":"<pre><code>rx_data(num: int, size: int)\n</code></pre> <p>Returns hex string of a 32 bit number.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rx_data(self, num: int, size: int):\n    \"\"\"Returns hex string of a 32 bit number.\"\"\"\n    binary_str = format(num, \"032b\")\n    shrinked_binary_str = binary_str[-size:]\n    shrinked_num = int(shrinked_binary_str, 2)\n    return hex(shrinked_num)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.swap_halves","title":"swap_halves","text":"<pre><code>swap_halves(hex_num: int) -&gt; int\n</code></pre> <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def swap_halves(self, hex_num: int) -&gt; int:\n    \"\"\"Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.\"\"\"\n    hex_str = f\"{hex_num:08x}\"\n    first_half = hex_str[:4]\n    second_half = hex_str[4:]\n    swapped_hex_str = second_half + first_half\n    return int(swapped_hex_str, 16)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.update_ca","title":"update_ca","text":"<pre><code>update_ca(\n    i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int\n) -&gt; int\n</code></pre> <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def update_ca(self, i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int) -&gt; int:\n    \"\"\"Builds the 48-bit command/address word using write strobe, config access, and memory address fields.\"\"\"\n    or_i_mem_wstrb = int(i_mem_wstrb != 0)\n    not_or_i_mem_wstrb = int(not or_i_mem_wstrb)\n    _ca = 0\n    _ca |= not_or_i_mem_wstrb &lt;&lt; 47\n    _ca |= int(i_cfg_access) &lt;&lt; 46\n    _ca |= (or_i_mem_wstrb &amp; int(i_cfg_access)) &lt;&lt; 45\n    _ca &amp;= ~((1 &lt;&lt; 45) - (1 &lt;&lt; 16))\n    _ca |= (i_mem_addr &amp; 0xFFFFFFF8) &lt;&lt; 13\n    _ca &amp;= ~0x7\n    _ca |= i_mem_addr &amp; 0x7\n    _ca &amp;= (1 &lt;&lt; 48) - 1\n    return _ca\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.wdata_words","title":"wdata_words","text":"<pre><code>wdata_words() -&gt; List[int]\n</code></pre> <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wdata_words(self) -&gt; List[int]:\n    \"\"\"Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.\"\"\"\n    if self.ca &gt;&gt; 46 &amp; 1:\n        return [(self.wdata &gt;&gt; 16) &amp; 0xFF, (self.wdata &gt;&gt; 24) &amp; 0xFF]\n\n    return [(self.wdata &gt;&gt; (8 * i)) &amp; 0xFF for i in range(4)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/#cocotbext.hyperbus.HyperBus_FSM.wstrb_words","title":"wstrb_words","text":"<pre><code>wstrb_words() -&gt; List[int]\n</code></pre> <p>Splits Write strobe into bits for each byte lane.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wstrb_words(self) -&gt; List[int]:\n    \"\"\"Splits Write strobe into bits for each byte lane.\"\"\"\n    return [(self.wstrb &gt;&gt; 1) &amp; 1, self.wstrb &amp; 1, (self.wstrb &gt;&gt; 3) &amp; 1, (self.wstrb &gt;&gt; 2) &amp; 1]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> hbc_fsm","text":""},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm","title":"hbc_fsm","text":"<p>Contains HyperBus_FSM class for the State Machine in hyperbus protocol.</p> <p>Classes:</p> <ul> <li> <code>HyperBus_FSM</code>           \u2013            <p>State machine class for hyperbus.</p> </li> </ul>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM","title":"HyperBus_FSM","text":"<pre><code>HyperBus_FSM()\n</code></pre> <p>State machine class for hyperbus.</p> <p>Methods:</p> <ul> <li> <code>ca_words</code>             \u2013              <p>Splits the 48bit CA into 6 bytes for transmission.</p> </li> <li> <code>fsm</code>             \u2013              <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> </li> <li> <code>fsm_reset</code>             \u2013              <p>Resets the fsm to IDLE state.</p> </li> <li> <code>generate_random_data</code>             \u2013              <p>Generate random num number of byte.</p> </li> <li> <code>get_time</code>             \u2013              <p>Get simulation time.</p> </li> <li> <code>is_rwdsvalid</code>             \u2013              <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> </li> <li> <code>log</code>             \u2013              <p>Logs a message value with prefixed simulation time.</p> </li> <li> <code>rwds_valid</code>             \u2013              <p>Returns True if RWDS is valid.</p> </li> <li> <code>rx_data</code>             \u2013              <p>Returns hex string of a 32 bit number.</p> </li> <li> <code>swap_halves</code>             \u2013              <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> </li> <li> <code>update_ca</code>             \u2013              <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> </li> <li> <code>wdata_words</code>             \u2013              <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> </li> <li> <code>wstrb_words</code>             \u2013              <p>Splits Write strobe into bits for each byte lane.</p> </li> </ul> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialization of signals in testbench and dut.\"\"\"\n    self.i_clk = 0\n    self.i_rstn = 1\n    self.i_cfg_access = 0\n    self.i_mem_valid = 0\n    self.o_mem_ready = 0\n    self.i_mem_wstrb = 0\n    self.i_mem_addr = 0\n    self.i_mem_wdata = 0\n    self.o_mem_rdata = 0\n    self.o_csn0 = 1\n    self.o_csn1 = 1\n    self.o_clk = 0\n    self.o_clkn = 1\n    self.o_dq = 0\n    self.i_dq = 0\n    self.o_dq_de = 0\n    self.o_rwds = 0\n    self.i_rwds = 0\n    self.o_rwds_de = 0\n    self.o_resetn = 1\n    self.io_dq: Union[int, str] = 0\n    self.io_rwds = 0\n    self.dq_z_en = 0\n    # Internal Variables\n    self.state = self.IDLE\n    self.ca = 0\n    self.wdata = 0\n    self.wstrb = 0\n    self.counter = 0\n    self.mem_ready = 0\n    self.mem_rdata = 0\n    self.rwds_d = 0\n    self.bus_clk = 0\n\n    # High-z values\n    self.highimp_8 = \"z\"\n    for _i in range(7):\n        self.highimp_8 += \"z\"\n    self.highimp_1 = \"z\"\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.ca_words","title":"ca_words","text":"<pre><code>ca_words() -&gt; List[int]\n</code></pre> <p>Splits the 48bit CA into 6 bytes for transmission.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def ca_words(self) -&gt; List[int]:\n    \"\"\"Splits the 48bit CA into 6 bytes for transmission.\"\"\"\n    return [(self.ca &gt;&gt; (8 * i)) &amp; 0xFF for i in range(6)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.fsm","title":"fsm  <code>async</code>","text":"<pre><code>fsm(dut: SimHandleBase) -&gt; None\n</code></pre> <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def fsm(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.\"\"\"\n    await Timer(5, \"ns\")\n    while True:\n        if not self.i_rstn:\n            self.fsm_reset()\n\n        elif self.state == self.IDLE:\n            self.mem_ready = 0\n            if self.i_mem_valid and not self.mem_ready:\n                self.ca = self.update_ca(self.i_mem_wstrb, self.i_cfg_access, self.i_mem_addr)\n                self.wdata = self.i_mem_wdata\n                self.wstrb = self.i_mem_wstrb\n                self.counter = 5\n                self.state = self.CAs\n\n        elif self.state == self.CAs:\n            if self.counter:\n                self.counter -= 1\n            elif self.ca &gt;&gt; 47:\n                self.counter = 3\n                self.state = self.READ\n            elif self.ca &gt;&gt; 46 &amp; 1:\n                self.counter = 1\n                self.state = self.WRITE\n            else:\n                self.counter = self.WRITE_LATENCY\n                self.state = self.WR_LATENCY\n\n        elif self.state == self.WR_LATENCY:\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.counter = 3\n                self.state = self.WRITE\n\n        elif self.state == self.WRITE:\n\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.state = self.DONE\n\n        elif self.state == self.READ:\n\n            if self.rwds_valid():\n                if self.counter == self.RBYTE_3:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 8) | (\n                        self.mem_rdata &amp; 0xFFFF00FF\n                    )\n                elif self.counter == self.RBYTE_2:\n                    self.mem_rdata = (self.i_dq) | (self.mem_rdata &amp; 0xFFFFFF00)\n                elif self.counter == self.RBYTE_1:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 24) | (\n                        self.mem_rdata &amp; 0x00FFFFFF\n                    )\n                elif self.counter == self.RBYTE_0:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 16) | (\n                        self.mem_rdata &amp; 0xFF00FFFF\n                    )\n                if self.counter:\n                    self.counter -= 1\n                else:\n                    self.state = self.DONE\n\n        elif self.state == self.DONE:\n            self.mem_ready = 1\n            self.state = self.IDLE\n\n        self.o_csn0 = self.state in [self.IDLE, self.DONE]\n        self.o_resetn = self.i_rstn\n        self.o_dq = (\n            self.ca_words()[self.counter]\n            if self.state == self.CAs\n            else (\n                self.wdata_words()[self.counter] if self.state == self.WRITE else 0\n            )\n        )\n        self.o_rwds = (\n            not self.wstrb_words()[self.counter] if self.state == self.WRITE else 0\n        )\n        self.o_dq_de = self.state in [self.CAs, self.WRITE]\n        self.o_rwds_de = self.state == self.WRITE and not (self.ca &gt;&gt; 46 &amp; 1)\n        self.o_mem_ready = self.mem_ready\n        self.o_mem_rdata = self.mem_rdata\n        self.io_dq = self.o_dq if self.o_dq_de else self.highimp_8\n        self.io_rwds = (self.o_rwds if self.o_rwds_de else BinaryValue(self.highimp_1))\n        await Timer(10, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.fsm_reset","title":"fsm_reset","text":"<pre><code>fsm_reset() -&gt; None\n</code></pre> <p>Resets the fsm to IDLE state.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def fsm_reset(self) -&gt; None:\n    \"\"\"Resets the fsm to IDLE state.\"\"\"\n    self.ca = 0\n    self.state = self.IDLE\n    self.mem_ready = 0\n    self.mem_rdata = 0\n    self.counter = 0\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.generate_random_data","title":"generate_random_data","text":"<pre><code>generate_random_data(num: int) -&gt; bytes\n</code></pre> <p>Generate random num number of byte.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def generate_random_data(self, num: int) -&gt; bytes:\n    \"\"\"Generate random num number of byte.\"\"\"\n    int_list = []\n    for _ in range(num):\n        # Generate a random integer within the specified range\n        random_int = random.randint(0, 2**8 - 1)\n        int_list.append(random_int)\n    return bytes(int_list)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.get_time","title":"get_time","text":"<pre><code>get_time() -&gt; int\n</code></pre> <p>Get simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def get_time(self) -&gt; int:\n    \"\"\"Get simulation time.\"\"\"\n    return get_sim_time(\"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.is_rwdsvalid","title":"is_rwdsvalid  <code>async</code>","text":"<pre><code>is_rwdsvalid() -&gt; None\n</code></pre> <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def is_rwdsvalid(self) -&gt; None:\n    \"\"\"Samples the RWDS input signal every 5ns and stores it in rwds_d.\"\"\"\n    while True:\n        await Timer(5, \"ns\")\n        self.rwds_d = self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.log","title":"log","text":"<pre><code>log(msg: str) -&gt; None\n</code></pre> <p>Logs a message value with prefixed simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def log(self, msg: str) -&gt; None:\n    \"\"\"Logs a message value with prefixed simulation time.\"\"\"\n    cocotb.log.info(f\"[{self.get_time()}]  {msg}\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.rwds_valid","title":"rwds_valid","text":"<pre><code>rwds_valid() -&gt; int\n</code></pre> <p>Returns True if RWDS is valid.</p> <p>Used for data sampling.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rwds_valid(self) -&gt; int:\n    \"\"\"Returns True if RWDS is valid.\n\n    Used for data sampling.\n    \"\"\"\n    return self.rwds_d or self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.rx_data","title":"rx_data","text":"<pre><code>rx_data(num: int, size: int)\n</code></pre> <p>Returns hex string of a 32 bit number.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rx_data(self, num: int, size: int):\n    \"\"\"Returns hex string of a 32 bit number.\"\"\"\n    binary_str = format(num, \"032b\")\n    shrinked_binary_str = binary_str[-size:]\n    shrinked_num = int(shrinked_binary_str, 2)\n    return hex(shrinked_num)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.swap_halves","title":"swap_halves","text":"<pre><code>swap_halves(hex_num: int) -&gt; int\n</code></pre> <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def swap_halves(self, hex_num: int) -&gt; int:\n    \"\"\"Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.\"\"\"\n    hex_str = f\"{hex_num:08x}\"\n    first_half = hex_str[:4]\n    second_half = hex_str[4:]\n    swapped_hex_str = second_half + first_half\n    return int(swapped_hex_str, 16)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.update_ca","title":"update_ca","text":"<pre><code>update_ca(\n    i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int\n) -&gt; int\n</code></pre> <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def update_ca(self, i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int) -&gt; int:\n    \"\"\"Builds the 48-bit command/address word using write strobe, config access, and memory address fields.\"\"\"\n    or_i_mem_wstrb = int(i_mem_wstrb != 0)\n    not_or_i_mem_wstrb = int(not or_i_mem_wstrb)\n    _ca = 0\n    _ca |= not_or_i_mem_wstrb &lt;&lt; 47\n    _ca |= int(i_cfg_access) &lt;&lt; 46\n    _ca |= (or_i_mem_wstrb &amp; int(i_cfg_access)) &lt;&lt; 45\n    _ca &amp;= ~((1 &lt;&lt; 45) - (1 &lt;&lt; 16))\n    _ca |= (i_mem_addr &amp; 0xFFFFFFF8) &lt;&lt; 13\n    _ca &amp;= ~0x7\n    _ca |= i_mem_addr &amp; 0x7\n    _ca &amp;= (1 &lt;&lt; 48) - 1\n    return _ca\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.wdata_words","title":"wdata_words","text":"<pre><code>wdata_words() -&gt; List[int]\n</code></pre> <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wdata_words(self) -&gt; List[int]:\n    \"\"\"Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.\"\"\"\n    if self.ca &gt;&gt; 46 &amp; 1:\n        return [(self.wdata &gt;&gt; 16) &amp; 0xFF, (self.wdata &gt;&gt; 24) &amp; 0xFF]\n\n    return [(self.wdata &gt;&gt; (8 * i)) &amp; 0xFF for i in range(4)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hbc_fsm/#cocotbext.hyperbus.hbc_fsm.HyperBus_FSM.wstrb_words","title":"wstrb_words","text":"<pre><code>wstrb_words() -&gt; List[int]\n</code></pre> <p>Splits Write strobe into bits for each byte lane.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wstrb_words(self) -&gt; List[int]:\n    \"\"\"Splits Write strobe into bits for each byte lane.\"\"\"\n    return [(self.wstrb &gt;&gt; 1) &amp; 1, self.wstrb &amp; 1, (self.wstrb &gt;&gt; 3) &amp; 1, (self.wstrb &gt;&gt; 2) &amp; 1]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> hyperbus_controller","text":""},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller","title":"hyperbus_controller","text":"<p>HyperBusController class.</p> <p>Classes:</p> <ul> <li> <code>HyperBusController</code>           \u2013            <p>HyperBus Controller class with methods.</p> </li> </ul>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController","title":"HyperBusController","text":"<pre><code>HyperBusController(dut: SimHandleBase)\n</code></pre> <p>               Bases: <code>HyperBus_FSM</code></p> <p>HyperBus Controller class with methods.</p> <p>Reset, ReadReg, WriteReg, ReadMem, WriteMem, clk_cycle, ck_cycle, int_to_8bit_array, arr_io_dq, Assign, wait_100ns, drive_dq, monitor_dq, wait_until_mem_ready.</p> <p>Methods:</p> <ul> <li> <code>Assign</code>             \u2013              <p>Drives and Monitors signals between controllor and dut.</p> </li> <li> <code>Init</code>             \u2013              <p>Initialize clock, Controller FSM and connects dut with controllor.</p> </li> <li> <code>ReadMem</code>             \u2013              <p>Reads the memory content form the starting address for a specified number of bytes.</p> </li> <li> <code>ReadReg</code>             \u2013              <p>Reads from a register based on the address, returns 2 bytes.</p> </li> <li> <code>Reset</code>             \u2013              <p>Reset based on timing requirement of the rtl model.</p> </li> <li> <code>WriteMem</code>             \u2013              <p>Writes the memory content form the starting address for specified bytes of data.</p> </li> <li> <code>WriteReg</code>             \u2013              <p>Writes 2 bytes to a register based on the address.</p> </li> <li> <code>arr_io_dq</code>             \u2013              <p>Returns the bit at an index for the 8 bit array.</p> </li> <li> <code>ca_words</code>             \u2013              <p>Splits the 48bit CA into 6 bytes for transmission.</p> </li> <li> <code>ck_cycle</code>             \u2013              <p>Updates the derived clock based on reset and chip select lines.</p> </li> <li> <code>clk_cycle</code>             \u2013              <p>Generate the clock for the test.</p> </li> <li> <code>drive_dq</code>             \u2013              <p>Drives the data bus.</p> </li> <li> <code>fsm</code>             \u2013              <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> </li> <li> <code>fsm_reset</code>             \u2013              <p>Resets the fsm to IDLE state.</p> </li> <li> <code>generate_random_data</code>             \u2013              <p>Generate random num number of byte.</p> </li> <li> <code>get_time</code>             \u2013              <p>Get simulation time.</p> </li> <li> <code>int_to_8bit_array</code>             \u2013              <p>Converts Integer into a 8 bit binary string array.</p> </li> <li> <code>is_rwdsvalid</code>             \u2013              <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> </li> <li> <code>log</code>             \u2013              <p>Logs a message value with prefixed simulation time.</p> </li> <li> <code>monitor_dq</code>             \u2013              <p>Moniters the data bus.</p> </li> <li> <code>rwds_valid</code>             \u2013              <p>Returns True if RWDS is valid.</p> </li> <li> <code>rx_data</code>             \u2013              <p>Returns hex string of a 32 bit number.</p> </li> <li> <code>swap_halves</code>             \u2013              <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> </li> <li> <code>update_ca</code>             \u2013              <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> </li> <li> <code>wait_100ns</code>             \u2013              <p>Waits for 100ns.</p> </li> <li> <code>wait_until_mem_ready</code>             \u2013              <p>Continously polls for every half clock cycle to check if the memory is ready.</p> </li> <li> <code>wdata_words</code>             \u2013              <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> </li> <li> <code>wstrb_words</code>             \u2013              <p>Splits Write strobe into bits for each byte lane.</p> </li> </ul> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def __init__(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Initialization.\"\"\"\n    super().__init__()\n    self.Init(dut)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.Assign","title":"Assign  <code>async</code>","text":"<pre><code>Assign(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Drives and Monitors signals between controllor and dut.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def Assign(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Drives and Monitors signals between controllor and dut.\"\"\"\n    # dut.rwds.value=BinaryValue(self.highimp_1)\n    self.drive_dq(dut, self.highimp_8)\n    while True:\n        if self.o_dq_de:\n            self.drive_dq(dut, self.io_dq)\n\n        if self.o_rwds_de:\n            dut.rwds.value = Force(self.o_rwds)\n        else:\n            dut.rwds.value = Release()\n\n        dut.csneg.value = self.o_csn0\n        dut.ck.value = self.o_clk\n        dut.resetneg.value = self.o_resetn\n        self.monitor_dq(dut)\n        self.i_rwds = dut.rwds.value\n        await Timer(1, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.Init","title":"Init","text":"<pre><code>Init(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Initialize clock, Controller FSM and connects dut with controllor.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def Init(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Initialize clock, Controller FSM and connects dut with controllor.\"\"\"\n    self.log(\"Init...\")\n    cocotb.start_soon(self.clk_cycle(dut))\n    cocotb.start_soon(self.Assign(dut))\n    cocotb.start_soon(self.fsm(dut))\n    cocotb.start_soon(self.is_rwdsvalid())\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.ReadMem","title":"ReadMem  <code>async</code>","text":"<pre><code>ReadMem(addr: int, count: int) -&gt; bytes\n</code></pre> <p>Reads the memory content form the starting address for a specified number of bytes.</p> <p>Each transaction is 4 bytes.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def ReadMem(self, addr: int, count: int) -&gt; bytes:\n    \"\"\"Reads the memory content form the starting address for a specified number of bytes.\n\n    Each transaction is 4 bytes.\n    \"\"\"\n    r_addr = addr\n    r_data = []\n\n    count_32b = count // 4\n    count_rem = count % 4\n    if count_rem &gt; 0:\n        count_32b += 1\n\n    for _i in range(count_32b):\n        self.log(\"--------------------------------------------------\")\n        self.log(\"Reading from memory...\")\n        self.i_cfg_access = 0\n        self.i_mem_wstrb = 0\n        self.i_mem_addr = r_addr\n        self.i_mem_valid = 1\n        await Timer(10, \"ns\")\n        self.i_mem_valid = 0\n        await self.wait_until_mem_ready()\n        r_data.append(self.o_mem_rdata)\n        self.log(\"Read operation complete.\")\n        self.log(f\"Address: {hex(r_addr)}   Data: {hex(self.o_mem_rdata)}\")\n        self.log(\"--------------------------------------------------\")\n        # self.log(f\"$$$$$$$$ o_mem_rdata {self.rx_data(self.o_mem_rdata,32)}\")\n        await Timer(20, \"ns\")\n        r_addr += 2\n\n    # Convert list of 32-bit packets back into bytes (little-endian)\n    byte_data = []\n    for val in r_data:\n        byte_data.append((val &gt;&gt; 0) &amp; 0xFF)\n        byte_data.append((val &gt;&gt; 8) &amp; 0xFF)\n        byte_data.append((val &gt;&gt; 16) &amp; 0xFF)\n        byte_data.append((val &gt;&gt; 24) &amp; 0xFF)\n\n    return bytes(byte_data[:count])\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.ReadReg","title":"ReadReg  <code>async</code>","text":"<pre><code>ReadReg(addr: int) -&gt; bytes\n</code></pre> <p>Reads from a register based on the address, returns 2 bytes.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def ReadReg(self, addr: int) -&gt; bytes:\n        \"\"\"Reads from a register based on the address, returns 2 bytes.\"\"\"\n        self.i_cfg_access = 1\n        self.i_mem_valid = 1\n        self.i_mem_wstrb = 0\n        self.i_mem_addr = addr\n        await Timer(10, \"ns\")\n        self.i_mem_valid = 0\n        await self.wait_until_mem_ready()\n        await Timer(20, \"ns\")\n\n        reg_value = self.mem_rdata &amp; 0xFFFF  # Directly use as int\n        return reg_value.to_bytes(2, byteorder=\"big\")  # or 'little' if system is little-endian\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.Reset","title":"Reset  <code>async</code>","text":"<pre><code>Reset(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Reset based on timing requirement of the rtl model.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def Reset(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Reset based on timing requirement of the rtl model.\"\"\"\n    self.i_rstn = 0\n    await Timer(100, \"ns\")\n    self.i_rstn = 1\n    self.log(\"Waiting for device power-up...\")\n    # TODO: Change power-up time in rtl\n    await Timer(160, \"ns\")\n    self.log(\"RAM IS READY!!!!!!\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.WriteMem","title":"WriteMem  <code>async</code>","text":"<pre><code>WriteMem(addr: int, data: bytes) -&gt; None\n</code></pre> <p>Writes the memory content form the starting address for specified bytes of data.</p> <p>Each transaction is 4 bytes.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def WriteMem(self, addr: int, data: bytes) -&gt; None:\n    \"\"\"Writes the memory content form the starting address for specified bytes of data.\n\n    Each transaction is 4 bytes.\n    \"\"\"\n    w_addr = addr\n\n    # Convert byte stream into list of 32-bit packets (little-endian)\n    padded_data = data\n    if (len(data) % 4) != 0:\n        padding = 4 - (len(data) % 4)\n        padded_data = data + b\"\\x00\" * padding\n\n    b32_list = []\n    for i in range(0, len(padded_data), 4):\n        val = (\n            (padded_data[i + 0])\n            | (padded_data[i + 1] &lt;&lt; 8)\n            | (padded_data[i + 2] &lt;&lt; 16)\n            | (padded_data[i + 3] &lt;&lt; 24)\n        )\n        b32_list.append(val)\n\n    for w_data in b32_list:\n        self.log(\"--------------------------------------------------\")\n        self.log(\"Writing into memory...\")\n        self.i_cfg_access = 0\n        self.i_mem_wdata = self.swap_halves(w_data)\n        self.i_mem_addr = w_addr\n        self.i_mem_valid = 1\n        self.i_mem_wstrb = 15\n        await Timer(10, \"ns\")\n        self.i_mem_valid = 0\n\n        await self.wait_until_mem_ready()\n        self.log(\"Write operation complete.\")\n        self.log(f\"Address: {hex(w_addr)}   Data: {hex(w_data)}\")\n        self.log(\"--------------------------------------------------\")\n        await Timer(20, \"ns\")\n        w_addr += 2\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.WriteReg","title":"WriteReg  <code>async</code>","text":"<pre><code>WriteReg(addr: int, data: bytes) -&gt; None\n</code></pre> <p>Writes 2 bytes to a register based on the address.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def WriteReg(self, addr: int, data: bytes) -&gt; None:\n    \"\"\"Writes 2 bytes to a register based on the address.\"\"\"\n    expected_bytes = 2\n    if len(data) != expected_bytes:\n        raise ValueError(\"WriteReg expects exactly 2 bytes.\")\n\n    int_data = int.from_bytes(data, byteorder=\"big\")  # or 'little' if required\n    self.i_cfg_access = 1\n    self.i_mem_wdata = self.swap_halves(int_data)\n    self.i_mem_addr = addr\n    self.i_mem_valid = 1\n    self.i_mem_wstrb = 0xF\n    await Timer(10, \"ns\")\n    self.i_mem_valid = 0\n    await self.wait_until_mem_ready()\n    await Timer(20, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.arr_io_dq","title":"arr_io_dq","text":"<pre><code>arr_io_dq(index: int, value: Union[int, str]) -&gt; str\n</code></pre> <p>Returns the bit at an index for the 8 bit array.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def arr_io_dq(self, index: int, value: Union[int, str]) -&gt; str:\n    \"\"\"Returns the bit at an index for the 8 bit array.\"\"\"\n    _io_dq = self.int_to_8bit_array(value)\n    return _io_dq[index]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.ca_words","title":"ca_words","text":"<pre><code>ca_words() -&gt; List[int]\n</code></pre> <p>Splits the 48bit CA into 6 bytes for transmission.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def ca_words(self) -&gt; List[int]:\n    \"\"\"Splits the 48bit CA into 6 bytes for transmission.\"\"\"\n    return [(self.ca &gt;&gt; (8 * i)) &amp; 0xFF for i in range(6)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.ck_cycle","title":"ck_cycle","text":"<pre><code>ck_cycle(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Updates the derived clock based on reset and chip select lines.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def ck_cycle(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Updates the derived clock based on reset and chip select lines.\"\"\"\n    if not self.i_rstn:\n        self.bus_clk = 0\n    else:\n        self.bus_clk = not self.bus_clk if not self.o_csn0 else 0\n    self.o_clk = self.bus_clk\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.clk_cycle","title":"clk_cycle  <code>async</code>","text":"<pre><code>clk_cycle(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Generate the clock for the test.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def clk_cycle(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Generate the clock for the test.\"\"\"\n    while True:\n        self.i_clk = 0\n        await Timer(5, \"ns\")\n        self.i_clk = 1\n        await Timer(5, \"ns\")\n        self.ck_cycle(dut)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.drive_dq","title":"drive_dq","text":"<pre><code>drive_dq(\n    dut: SimHandleBase, value: Union[int, str]\n) -&gt; None\n</code></pre> <p>Drives the data bus.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def drive_dq(self, dut: SimHandleBase, value: Union[int, str]) -&gt; None:\n    \"\"\"Drives the data bus.\"\"\"\n    dut.dq7.value = BinaryValue(self.arr_io_dq(0, value))\n    dut.dq6.value = BinaryValue(self.arr_io_dq(1, value))\n    dut.dq5.value = BinaryValue(self.arr_io_dq(2, value))\n    dut.dq4.value = BinaryValue(self.arr_io_dq(3, value))\n    dut.dq3.value = BinaryValue(self.arr_io_dq(4, value))\n    dut.dq2.value = BinaryValue(self.arr_io_dq(5, value))\n    dut.dq1.value = BinaryValue(self.arr_io_dq(6, value))\n    dut.dq0.value = BinaryValue(self.arr_io_dq(7, value))\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.fsm","title":"fsm  <code>async</code>","text":"<pre><code>fsm(dut: SimHandleBase) -&gt; None\n</code></pre> <p>FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def fsm(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"FSM for states IDLE, CAs, WR_LATENCY, WRITE, READ, DONE.\"\"\"\n    await Timer(5, \"ns\")\n    while True:\n        if not self.i_rstn:\n            self.fsm_reset()\n\n        elif self.state == self.IDLE:\n            self.mem_ready = 0\n            if self.i_mem_valid and not self.mem_ready:\n                self.ca = self.update_ca(self.i_mem_wstrb, self.i_cfg_access, self.i_mem_addr)\n                self.wdata = self.i_mem_wdata\n                self.wstrb = self.i_mem_wstrb\n                self.counter = 5\n                self.state = self.CAs\n\n        elif self.state == self.CAs:\n            if self.counter:\n                self.counter -= 1\n            elif self.ca &gt;&gt; 47:\n                self.counter = 3\n                self.state = self.READ\n            elif self.ca &gt;&gt; 46 &amp; 1:\n                self.counter = 1\n                self.state = self.WRITE\n            else:\n                self.counter = self.WRITE_LATENCY\n                self.state = self.WR_LATENCY\n\n        elif self.state == self.WR_LATENCY:\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.counter = 3\n                self.state = self.WRITE\n\n        elif self.state == self.WRITE:\n\n            if self.counter:\n                self.counter -= 1\n            else:\n                self.state = self.DONE\n\n        elif self.state == self.READ:\n\n            if self.rwds_valid():\n                if self.counter == self.RBYTE_3:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 8) | (\n                        self.mem_rdata &amp; 0xFFFF00FF\n                    )\n                elif self.counter == self.RBYTE_2:\n                    self.mem_rdata = (self.i_dq) | (self.mem_rdata &amp; 0xFFFFFF00)\n                elif self.counter == self.RBYTE_1:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 24) | (\n                        self.mem_rdata &amp; 0x00FFFFFF\n                    )\n                elif self.counter == self.RBYTE_0:\n                    self.mem_rdata = (self.i_dq &lt;&lt; 16) | (\n                        self.mem_rdata &amp; 0xFF00FFFF\n                    )\n                if self.counter:\n                    self.counter -= 1\n                else:\n                    self.state = self.DONE\n\n        elif self.state == self.DONE:\n            self.mem_ready = 1\n            self.state = self.IDLE\n\n        self.o_csn0 = self.state in [self.IDLE, self.DONE]\n        self.o_resetn = self.i_rstn\n        self.o_dq = (\n            self.ca_words()[self.counter]\n            if self.state == self.CAs\n            else (\n                self.wdata_words()[self.counter] if self.state == self.WRITE else 0\n            )\n        )\n        self.o_rwds = (\n            not self.wstrb_words()[self.counter] if self.state == self.WRITE else 0\n        )\n        self.o_dq_de = self.state in [self.CAs, self.WRITE]\n        self.o_rwds_de = self.state == self.WRITE and not (self.ca &gt;&gt; 46 &amp; 1)\n        self.o_mem_ready = self.mem_ready\n        self.o_mem_rdata = self.mem_rdata\n        self.io_dq = self.o_dq if self.o_dq_de else self.highimp_8\n        self.io_rwds = (self.o_rwds if self.o_rwds_de else BinaryValue(self.highimp_1))\n        await Timer(10, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.fsm_reset","title":"fsm_reset","text":"<pre><code>fsm_reset() -&gt; None\n</code></pre> <p>Resets the fsm to IDLE state.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def fsm_reset(self) -&gt; None:\n    \"\"\"Resets the fsm to IDLE state.\"\"\"\n    self.ca = 0\n    self.state = self.IDLE\n    self.mem_ready = 0\n    self.mem_rdata = 0\n    self.counter = 0\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.generate_random_data","title":"generate_random_data","text":"<pre><code>generate_random_data(num: int) -&gt; bytes\n</code></pre> <p>Generate random num number of byte.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def generate_random_data(self, num: int) -&gt; bytes:\n    \"\"\"Generate random num number of byte.\"\"\"\n    int_list = []\n    for _ in range(num):\n        # Generate a random integer within the specified range\n        random_int = random.randint(0, 2**8 - 1)\n        int_list.append(random_int)\n    return bytes(int_list)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.get_time","title":"get_time","text":"<pre><code>get_time() -&gt; int\n</code></pre> <p>Get simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def get_time(self) -&gt; int:\n    \"\"\"Get simulation time.\"\"\"\n    return get_sim_time(\"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.int_to_8bit_array","title":"int_to_8bit_array","text":"<pre><code>int_to_8bit_array(\n    num: Union[int, str],\n) -&gt; Union[str, List[str]]\n</code></pre> <p>Converts Integer into a 8 bit binary string array.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def int_to_8bit_array(self, num: Union[int, str]) -&gt; Union[str, List[str]]:\n    \"\"\"Converts Integer into a 8 bit binary string array.\"\"\"\n    if num in (self.highimp_1, self.highimp_8):\n        return str(num)\n    binary_str = bin(int(num))[2:]\n    padded_binary_str = binary_str.zfill(8)\n    return [str(bit) for bit in padded_binary_str]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.is_rwdsvalid","title":"is_rwdsvalid  <code>async</code>","text":"<pre><code>is_rwdsvalid() -&gt; None\n</code></pre> <p>Samples the RWDS input signal every 5ns and stores it in rwds_d.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>async def is_rwdsvalid(self) -&gt; None:\n    \"\"\"Samples the RWDS input signal every 5ns and stores it in rwds_d.\"\"\"\n    while True:\n        await Timer(5, \"ns\")\n        self.rwds_d = self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.log","title":"log","text":"<pre><code>log(msg: str) -&gt; None\n</code></pre> <p>Logs a message value with prefixed simulation time.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def log(self, msg: str) -&gt; None:\n    \"\"\"Logs a message value with prefixed simulation time.\"\"\"\n    cocotb.log.info(f\"[{self.get_time()}]  {msg}\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.monitor_dq","title":"monitor_dq","text":"<pre><code>monitor_dq(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Moniters the data bus.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>def monitor_dq(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Moniters the data bus.\"\"\"\n    arr = [\n        dut.dq7.value,\n        dut.dq6.value,\n        dut.dq5.value,\n        dut.dq4.value,\n        dut.dq3.value,\n        dut.dq2.value,\n        dut.dq1.value,\n        dut.dq0.value,\n    ]\n    binary_str = \"\".join(map(str, arr))\n\n    if any(char == \"z\" for char in binary_str):\n        self.i_dq = 0\n    else:\n        self.i_dq = int(binary_str, 2)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.rwds_valid","title":"rwds_valid","text":"<pre><code>rwds_valid() -&gt; int\n</code></pre> <p>Returns True if RWDS is valid.</p> <p>Used for data sampling.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rwds_valid(self) -&gt; int:\n    \"\"\"Returns True if RWDS is valid.\n\n    Used for data sampling.\n    \"\"\"\n    return self.rwds_d or self.i_rwds\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.rx_data","title":"rx_data","text":"<pre><code>rx_data(num: int, size: int)\n</code></pre> <p>Returns hex string of a 32 bit number.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def rx_data(self, num: int, size: int):\n    \"\"\"Returns hex string of a 32 bit number.\"\"\"\n    binary_str = format(num, \"032b\")\n    shrinked_binary_str = binary_str[-size:]\n    shrinked_num = int(shrinked_binary_str, 2)\n    return hex(shrinked_num)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.swap_halves","title":"swap_halves","text":"<pre><code>swap_halves(hex_num: int) -&gt; int\n</code></pre> <p>Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def swap_halves(self, hex_num: int) -&gt; int:\n    \"\"\"Swaps the upper and lower 16 bits of a 32-bit value used for word alignment, endianess conversion into little endian.\"\"\"\n    hex_str = f\"{hex_num:08x}\"\n    first_half = hex_str[:4]\n    second_half = hex_str[4:]\n    swapped_hex_str = second_half + first_half\n    return int(swapped_hex_str, 16)\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.update_ca","title":"update_ca","text":"<pre><code>update_ca(\n    i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int\n) -&gt; int\n</code></pre> <p>Builds the 48-bit command/address word using write strobe, config access, and memory address fields.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def update_ca(self, i_mem_wstrb: int, i_cfg_access: int, i_mem_addr: int) -&gt; int:\n    \"\"\"Builds the 48-bit command/address word using write strobe, config access, and memory address fields.\"\"\"\n    or_i_mem_wstrb = int(i_mem_wstrb != 0)\n    not_or_i_mem_wstrb = int(not or_i_mem_wstrb)\n    _ca = 0\n    _ca |= not_or_i_mem_wstrb &lt;&lt; 47\n    _ca |= int(i_cfg_access) &lt;&lt; 46\n    _ca |= (or_i_mem_wstrb &amp; int(i_cfg_access)) &lt;&lt; 45\n    _ca &amp;= ~((1 &lt;&lt; 45) - (1 &lt;&lt; 16))\n    _ca |= (i_mem_addr &amp; 0xFFFFFFF8) &lt;&lt; 13\n    _ca &amp;= ~0x7\n    _ca |= i_mem_addr &amp; 0x7\n    _ca &amp;= (1 &lt;&lt; 48) - 1\n    return _ca\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.wait_100ns","title":"wait_100ns  <code>async</code>","text":"<pre><code>wait_100ns(dut: SimHandleBase) -&gt; None\n</code></pre> <p>Waits for 100ns.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def wait_100ns(self, dut: SimHandleBase) -&gt; None:\n    \"\"\"Waits for 100ns.\"\"\"\n    await Timer(100, \"ns\")\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.wait_until_mem_ready","title":"wait_until_mem_ready  <code>async</code>","text":"<pre><code>wait_until_mem_ready() -&gt; None\n</code></pre> <p>Continously polls for every half clock cycle to check if the memory is ready.</p> Source code in <code>src/cocotbext/hyperbus/hyperbus_controller.py</code> <pre><code>async def wait_until_mem_ready(self) -&gt; None:\n    \"\"\"Continously polls for every half clock cycle to check if the memory is ready.\"\"\"\n    while True:\n        await Timer(5, \"ns\")\n        if self.o_mem_ready:\n            break\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.wdata_words","title":"wdata_words","text":"<pre><code>wdata_words() -&gt; List[int]\n</code></pre> <p>Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wdata_words(self) -&gt; List[int]:\n    \"\"\"Splits the 32 bit write data into bytes, with special arrangement if CA[46]=1.\"\"\"\n    if self.ca &gt;&gt; 46 &amp; 1:\n        return [(self.wdata &gt;&gt; 16) &amp; 0xFF, (self.wdata &gt;&gt; 24) &amp; 0xFF]\n\n    return [(self.wdata &gt;&gt; (8 * i)) &amp; 0xFF for i in range(4)]\n</code></pre>"},{"location":"reference/cocotbext/hyperbus/hyperbus_controller/#cocotbext.hyperbus.hyperbus_controller.HyperBusController.wstrb_words","title":"wstrb_words","text":"<pre><code>wstrb_words() -&gt; List[int]\n</code></pre> <p>Splits Write strobe into bits for each byte lane.</p> Source code in <code>src/cocotbext/hyperbus/hbc_fsm.py</code> <pre><code>def wstrb_words(self) -&gt; List[int]:\n    \"\"\"Splits Write strobe into bits for each byte lane.\"\"\"\n    return [(self.wstrb &gt;&gt; 1) &amp; 1, self.wstrb &amp; 1, (self.wstrb &gt;&gt; 3) &amp; 1, (self.wstrb &gt;&gt; 2) &amp; 1]\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}